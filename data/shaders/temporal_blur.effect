#define WEIGHT_SIZE 32

uniform float4x4 ViewProj;
uniform texture2d image;
uniform texture2d prior_image;
//uniform texture2d background;
uniform float current_weight;
uniform float clear_threshold;


sampler_state textureSampler{
    Filter = Linear;
    AddressU = Clamp;
    AddressV = Clamp;
    MinLOD = 0;
    MaxLOD = 0;
};

struct VertData
{
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};


VertData mainTransform(VertData v_in)
{
	v_in.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	return v_in;
}

float4 mainImage(VertData v_in) : TARGET
{
	float4 col = image.Sample(textureSampler, v_in.uv);
	float4 col_prior = prior_image.Sample(textureSampler, v_in.uv);
	//float4 col_out = col * current_weight + col_prior * (1.0 - current_weight);
	float4 col_out = lerp(col_prior, col, current_weight);
	float clear = step(distance(col_out, col), clear_threshold);
	return lerp(col_out, col, clear);
}

// An in-progress version of background compositing that should be more accurate,
// but is currently causing some artifacting along the edges of the source.
//float4 mainImageComposite(VertData v_in) : TARGET
//{
//    // DO THE BLUR
//    // 1. Sample incoming pixel, multiply by weight[0]
//	float4 c = image.Sample(textureSampler, v_in.uv);
//	float4 bg_col = background.Sample(textureSampler, v_in.uv);
//	float4 col = float4(c.rgb * c.a + bg_col.rgb * (1.0 - c.a), c.a) * weightLookup(0);
//	float total_weight = weightLookup(0);

//    // 2. March out from incoming pixel, multiply by corresponding weight.
//	for (uint i = 1; i < kernel_size; i++)
//	{
//		float weight = weightLookup(i);
//		float offset = offsetLookup(i);
//		total_weight += 2.0 * weight;
//		c = image.Sample(textureSampler, v_in.uv + (offset * texel_step));
//		col += float4(c.rgb * c.a + bg_col.rgb * (1.0 - c.a), c.a) * weight;
//		c = image.Sample(textureSampler, v_in.uv - (offset * texel_step));
//		col += float4(c.rgb * c.a + bg_col.rgb * (1.0 - c.a), c.a) * weight;
//	}
//	col /= total_weight;
//	return col;
//}

technique Draw
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImage(v_in);
	}
}

//technique DrawComposite
//{
//	pass
//	{
//		vertex_shader = mainTransform(v_in);
//		pixel_shader = mainImageComposite(v_in);
//	}
//}
